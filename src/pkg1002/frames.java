/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg1002;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author amdad
 */
public class frames extends javax.swing.JFrame {
    public static String contents;
    
 public static Map<Integer, Set<String>> bb = new HashMap<Integer, Set<String>>();
    /**
     * Creates new form frames
     */
 
 //....................................................
  int V;
        List <Integer> adj[];
    public frames(int V)
    {
        this.V = V;
        adj = new ArrayList[V];
        for(int i = 0; i < V; i++)
            adj[i]=new ArrayList<Integer>();
    }
     
    // function to add an edge to graph
    public void addEdge(int u,int v)
    {
        adj[u].add(v);
        //System.out.println(u+" "+v);
    }
  
           // prints a Topological Sort of the complete graph  
     public Queue<Integer>topologicalSort()
    {
         Queue<Integer> queue = new LinkedList<Integer>();
        int indegree[] = new int[V];
         
        for(int i = 0; i < V; i++)
        {
            ArrayList<Integer> temp = (ArrayList<Integer>) adj[i];
            for(int node : temp)
            {
                indegree[node]++;
            }
        }
   
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i = 0;i < V; i++)
        {
            if(indegree[i]==0)
                q.add(i);
        }
         
        int cnt = 0;
        
        Vector <Integer> topOrder=new Vector<Integer>();
        while(!q.isEmpty())
        {
           
            int u=q.poll();
            topOrder.add(u);
           
            for(int node : adj[u])
            {
                if(--indegree[node] == 0)
                    q.add(node);
            }
            cnt++;
        }
         
        // Check if there was a cycle       
        if(cnt != V)
        {
           
        }
          int c=0;
        // Print topological order          
        for(int i : topOrder)
        {
              queue.add(i);
           // System.out.print(i+" ");
            area.append(i+"");
           
        }
        return queue;
    }
 //................................................................
    public frames() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        combo = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        blocks = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        area1 = new javax.swing.JTextArea();
        brawose = new javax.swing.JButton();
        t = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "C", "Java", "Object Oriented" }));

        jButton1.setText("PARCENTAGE ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        text.setColumns(20);
        text.setRows(5);
        jScrollPane2.setViewportView(text);

        jButton2.setText("CLEAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("TOPOLOGICAL ORDER");
        jButton3.setActionCommand("Parallel Part");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("SERIAL AND PARALLEL PARTS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("INPUT THE PROGRAM");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Method of Detecting Serial and Parallel  Components in Programs");

        blocks.setText("BLOCKS");
        blocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blocksActionPerformed(evt);
            }
        });

        area1.setColumns(20);
        area1.setRows(5);
        jScrollPane3.setViewportView(area1);

        brawose.setText("Brawose");
        brawose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brawoseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))))
                .addGap(29, 29, 29))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(blocks, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(brawose, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(brawose))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blocks, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        area.setText("");
        //String u=text.getText();
      Object v=combo.getSelectedItem();
     twoo gg=new twoo(8);
    
       // gg=new frames(8);
        //String[] b;
         List<String> b = new ArrayList<String>();
        String[] kaiu = new String[100];
               Set<String>kai= new HashSet<String>();
                 Map<String,Integer> kaium = new HashMap<String,Integer>();
     //System.out.println(u);
      if(v=="C"){
            List<String> a = new ArrayList<String>();
          String[] glo=contents.split("\\\n");
                 //String[] global={"G1","G2","G3","G4"};
                /// System.out.println(glo[0]);
               String[] global=glo[1].split(" |,|;");
               //area.append(global[1]);
      // a=twoo.function(contents);
       
       // List<String> a = new ArrayList<String>();
              //area.append(contents);
              a=twoo.function(contents);
                twoo ggg=new twoo(a.size());
              ggg=twoo.gggg(a);
              Queue<Integer> que = new LinkedList<Integer>();
              Integer[] Depth=new Integer[100];
              //que.addAll(ggg.topologicalSort());
              Depth=ggg.topologicalSort();
            boolean flag;
            flag=false;
            int par=0;
           // area.append("Tropological order is: "+que);
              for(int i=0;i<twoo.V;i++)
              {
                  int c=0;
                  
                    List<Integer> p = new ArrayList<Integer>();
             for(int j=0;j<twoo.V;j++)
             {
                 if(Depth[j]==i)
                 {
                // area.append(j+" and ");
                   p.add(j);
                   c++;
                    
                 }
                 
             }
          // area.append(p.get(i) +" \n then");
              if(c>1)
                  par=par+c;
             if(c>=1){
               //  area.append(p +"\n");
                 flag=true;
            }
            
               
         }
              if(flag==false)
              {
                //  area.append( "no parallel part\n");
              }
            //  area.append(twoo.V +"%\n");
              float vv=twoo.V;
            //  area.append(par+"\n");
              float f=par/vv;
              area.append("percentage of parallel portions: "+f*100+"%\n");
       
       
       
      // gg=twoo.gggg(a);
      //area.append();
       Map<Integer, Set<String>> SDC = new HashMap<Integer, Set<String>>();
         Map<Integer, Set<String>> SUC = new HashMap<Integer, Set<String>>();
      
     
     // area.append("block"+i+": "+a[i]+"\n");
      
      Set<String> suuc = new HashSet<String>();
      //suuc=twoo.suuc(a[1],global);
    // area.append("sdc of"+suuc +"\n");
           SDC=twoo.sdc(global,contents);
           
     //   area.append("Set of definations in "+SDC +"\n");
            SUC=twoo.suc(global,contents);
        // Map<Integer,Integer> dependency=twoo.dependency(SUC,SDC);
         //   area.append("Set of Uses in "+SUC +"\n");
            //  area.append("dpendency of "+dependency+"\n");
            frames g=new frames(8);
       for(int j=0;j<a.size();j++){
           String[] aa= a.get(j).split("\\ |\\,|\\(|\\)|\\;|\\{");
              kaiu[j]=aa[1];
                   kai.add(aa[1]);
                    kaium.put(aa[1], j); 
            bb.put(j,twoo.definations(a.get(j)));
                     for(int l=0;l<a.size();l++){
                      // bb=twoo.definations(a[i]);
                      // area.append("dgfdgfh "+bb);
                       if(j!=l&&bb.get(j).contains(kaiu[l]))
                       {
                          // area.append("dgfdgfh "+j+" "+l+"\n");
                            g.addEdge(j, l);
                          //  g.topologicalSort();
                           // SDC.put(j, SDC.get(l));
                            // SUC.put(j,SUC.get(l));
                       // area.append("suc of "+g+"\n");
                        //area.append("suc of "+SDC+"\n");
                         
                       }
                    
              
                      
                 }
                     //System.out.println();
            // area.append("subblock"+i+": "+a[i]+"\n");
             
             }
          //area.append("dfgf");
            g.topologicalSort();
             //area.append("dfgf"+twoo.queue.element());
      }
      else if(v=="Java")
      {
            List<String> a = new ArrayList<String>();
            a=javatwo.function(contents);
              //area.append(a.get(1));
       //.........................................................
            
              javatwo ggg=new javatwo(a.size());
              ggg=javatwo.gggg(a);
              Queue<Integer> que = new LinkedList<Integer>();
              //que.addAll(ggg.topologicalSort());
            //area.append("Tropological order is: "+que);
              Integer[] Dep=new Integer[100];
              //que.addAll(ggg.topologicalSort());
              Dep=ggg.jtopologicalSort();
             // area.append(javatwo.V+"gh");
           // area.append("Tropological order is: "+que);
               boolean flag;
              // area.append(a.size()+"gh\n");
            flag=false;
             int par=0;
            //for(int i=0;i<4;i++)
              //    area.append("depth "+Dep[i]);
             for(int i=0;i<a.size();i++)
              {
                   int d=0;
                    List<Integer> q = new ArrayList<Integer>();
                   // area.append(javatwo.V+"gh");
             for(int j=0;j<a.size();j++)
             {
                // area.append(javatwo.V+"gh");
                 if(Dep[j]==i){
                    // area.append(i+" iiii \n");
                     //area.append(j+" jjjjj \n");
                      q.add(j);
                     d++;
                 }
                 
             }
            // area.append(d+"dfgdg\n");
             if(d>1)
                  par=par+d;
             if(d>=1){
                 //area.append(q +"\n");
                 flag=true;
             }
          }
              float vv=a.size();
            //  area.append(par+"\n");
              float f=par/vv;
             area.append("percentage of parallel portions: "+f*100+"%\n");
             //for(int i=0;i<4;i++)
               //   area.append("etreyrtu"+Dep[i]);
             if(flag==false)
              {
               //   area.append( "no parallel part\n");
              }
              
        
            
            
            // String[] glo=contents.split("\\\n");
                String[] global={"a","x","y","z"};
                
               //String[] global=glo[2].split("int| |,|;");
                //System.out.println("dfgfh"+global.length);
              Map<Integer, Set<String>> SDC = new HashMap<Integer, Set<String>>();
         Map<Integer, Set<String>> SUC = new HashMap<Integer, Set<String>>();
        //  SDC=twoo.sdc(global,contents);
         // area.append("Set of Definations "+SDC +"\n");  
        // SUC=twoo.suc(global,contents);
        //  area.append("Set of Uses  "+SUC+"\n");
        
           
        //.......................................................................    
     for(int i=0;i<a.size();i++){
     //area.append("block"+i+": "+a[i]+"\n");
       
          //boolean flag=false;
                    String[] aa= a.get(i).split("\\ |\\,|\\(|\\)|\\;|\\{");
            //  area.append("blockryryy"+i+": "+aa[3]+"\n");
                  kaiu[i]=aa[3];
                   kai.add(aa[3]);
                    kaium.put(aa[3], i); 
            bb.put(i,twoo.definations(a.get(i)));
      
                   for(int l=0;l<a.size();l++){
                      // bb=twoo.definations(a[i]);
                     // area.append("dgfdgfh "+bb);
                       if(i!=l&&bb.get(i).contains(kaiu[l]))
                       {
                         //area.append("dgfdgfh "+i+" "+l+"\n");
                          //SDC.put(i, SDC.get(l));
                            // SUC.put(i,SUC.get(l));
                      //area.append("suc of "+SUC+"\n");
                     //area.append("suc of "+SDC+"\n");
                         
                       }
                     
              
                      
                 }
                     //System.out.println();
                    
             }
     
      }
      else
          area.append("type error");
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       text.setText("");
        area.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       // new framess().setVisible(true);
        //new frames().dispose();
        area1.setText("");
     // String u=text.getText();
      Object v=combo.getSelectedItem();
       List<String> a = new ArrayList<String>();
        if(v=="C"){
              //area.append("");
              a=twoo.function(contents);
                twoo ggg=new twoo(a.size());
              ggg=twoo.gggg(a);
              Queue<Integer> que = new LinkedList<Integer>();
              Integer[] Depth=new Integer[100];
              que.addAll(ggg.topoSort());
              //Depth=ggg.topologicalSort();
            area1.append("Topological order is: "+que);
            
            
               a=twoo.function(contents);
               // twoo ggg=new twoo(a.size());
              ggg=twoo.gggg(a);
             // Queue<Integer> que = new LinkedList<Integer>();
              //Integer[] Depth=new Integer[100];
              //que.addAll(ggg.topologicalSort());
              Depth=ggg.topologicalSort();
            boolean flag;
            flag=false;
            int par=0;
           // area.append("Tropological order is: "+que);
              for(int i=0;i<twoo.V;i++)
              {
                  int c=0;
                  
                    List<Integer> p = new ArrayList<Integer>();
             for(int j=0;j<twoo.V;j++)
             {
                 if(Depth[j]==i)
                 {
                // area.append(j+" and ");
                   p.add(j);
                   c++;
                    
                 }
                 
             }
          // area.append(p.get(i) +" \n then");
              if(c>1)
                  par=par+c;
             if(c>=1){
               //  area.append(p +"\n");
                 flag=true;
            }
            
               
         }
              if(flag==false)
              {
                //  area.append( "no parallel part\n");
              }
            //  area.append(twoo.V +"%\n");
              float vv=twoo.V;
            //  area.append(par+"\n");
              float f=par/vv;
              area1.append("\npercentage of parallel portions: "+f*100+"%\n");
              
              
        }
        if(v=="Java"){
              //area.append("");
              a=javatwo.function(contents);
                javatwo ggg=new javatwo(a.size());
              ggg=javatwo.gggg(a);
              Queue<Integer> que = new LinkedList<Integer>();
              //que.addAll(ggg.topologicalSort());
            //area.append("Tropological order is: "+que);
             // Integer[] Depth=new Integer[100];
             // area1.append("dsgdfshgsfdhs");
              que.addAll(ggg.topoSort());
              //Depth=ggg.topologicalSort();
           area1.append("Topological order is: "+que);
            
              
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void blocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blocksActionPerformed
        // TODO add your handling code here:
        
        //String u=text.getText();
         text.setText(""); 
      Object v=combo.getSelectedItem();
       List<String> a = new ArrayList<String>();
        if(v=="C"){
              a=twoo.function(contents);
              for(int i=0;i<a.size();i++)
              {text.append("..............................................\n");
               text.append("This is the block number"+i+": \n");
              text.append("..............................................\n");
              text.append(a.get(i) +"\n");
              
              }
              }
        if(v=="Java"){
              a=javatwo.function(contents);
              for(int i=0;i<a.size();i++)
              {text.append("..............................................\n");
               text.append("This is the block number"+i+": \n");
              text.append("..............................................\n");
              text.append(a.get(i) +"\n");
              
              }
              }
        
            
    
    }//GEN-LAST:event_blocksActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        area.setText("");
        //String u=text.getText();
      Object v=combo.getSelectedItem();
       area.append("Serial and parallel components are: \n");
        if(v=="C"){
             List<String> a = new ArrayList<String>();
              //area.append(contents);
              a=twoo.function(contents);
                twoo ggg=new twoo(a.size());
              ggg=twoo.gggg(a);
              Queue<Integer> que = new LinkedList<Integer>();
              Integer[] Depth=new Integer[100];
              //que.addAll(ggg.topologicalSort());
              Depth=ggg.topologicalSort();
            boolean flag;
            flag=false;
            int par=0;
           // area.append("Tropological order is: "+que);
              for(int i=0;i<twoo.V;i++)
              {
                  int c=0;
                  
                    List<Integer> p = new ArrayList<Integer>();
             for(int j=0;j<twoo.V;j++)
             {
                 if(Depth[j]==i)
                 {
                // area.append(j+" and ");
                   p.add(j);
                   c++;
                    
                 }
                 
             }
          // area.append(p.get(i) +" \n then");
              if(c>1)
                  par=par+c;
             if(c>=1){
                 area.append(p +"\n");
                 flag=true;
            }
            
               
         }
              if(flag==false)
              {
                  area.append( "no parallel part\n");
              }
            //  area.append(twoo.V +"%\n");
              float vv=twoo.V;
            //  area.append(par+"\n");
              float f=par/vv;
             // area.append(f*100+"%\n");
        }
        if(v=="Java"){
             List<String> a = new ArrayList<String>();
              //area.append(contents);
              a=javatwo.function(contents);
                javatwo ggg=new javatwo(a.size());
              ggg=javatwo.gggg(a);
              Queue<Integer> que = new LinkedList<Integer>();
              //que.addAll(ggg.topologicalSort());
            //area.append("Tropological order is: "+que);
              Integer[] Dep=new Integer[100];
              //que.addAll(ggg.topologicalSort());
              Dep=ggg.jtopologicalSort();
             // area.append(javatwo.V+"gh");
           // area.append("Tropological order is: "+que);
               boolean flag;
              // area.append(a.size()+"gh\n");
            flag=false;
             int par=0;
            //for(int i=0;i<4;i++)
              //    area.append("depth "+Dep[i]);
             for(int i=0;i<a.size();i++)
              {
                   int d=0;
                    List<Integer> q = new ArrayList<Integer>();
                   // area.append(javatwo.V+"gh");
             for(int j=0;j<a.size();j++)
             {
                // area.append(javatwo.V+"gh");
                 if(Dep[j]==i){
                    // area.append(i+" iiii \n");
                     //area.append(j+" jjjjj \n");
                      q.add(j);
                     d++;
                 }
                 
             }
            // area.append(d+"dfgdg\n");
             if(d>1)
                  par=par+d;
             if(d>=1){
                 area.append(q +"->");
                 flag=true;
             }
          }
              float vv=a.size();
            //  area.append(par+"\n");
              float f=par/vv;
             // area.append(f*100+"%\n");
             //for(int i=0;i<4;i++)
               //   area.append("etreyrtu"+Dep[i]);
             if(flag==false)
              {
                  area.append( "no parallel part\n");
              }
              
        }
       // area.append(twoo.queue.toString());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void brawoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brawoseActionPerformed
        // TODO add your handling code here:
       // new chooser().setVisible(true); 
        JFileChooser a=new JFileChooser();
        a.showOpenDialog(null);
        File f=a.getSelectedFile();
        String n=f.getAbsolutePath();
        t.setText(n);
        
        
         StringBuilder sb = new StringBuilder();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(n));
            String line;
            while ((line = br.readLine()) != null) {
                if (sb.length() > 0) {
                    sb.append("\n");
                }
                sb.append(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
         contents = sb.toString();
        text.append(contents);
    }//GEN-LAST:event_brawoseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frames().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JTextArea area1;
    private javax.swing.JButton blocks;
    private javax.swing.JButton brawose;
    private javax.swing.JComboBox combo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField t;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
